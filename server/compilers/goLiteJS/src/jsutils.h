char *jsutils = 
"var utility = module.exports = {};\n"
"var util = require('util');\n"
"//Copy array to/from\n"
"utility.copyArrayToFrom = function copyArrayToFrom(arr,toarray)\n"
"{\n"
"    var newArr = toarray;//Initializing New Array\n"
"    arr.forEach((element,index)=>{\n"
"        var type = typeof element;\n"
"        if(element.constructor === Array) newArr[index] = utility.copyArray(element); //Push Element into array;\n"
"        else if(type ==='string' ||type ==='number' || type ==='boolean')newArr[index] = element; //This are passed by value\n"
"        else{\n"
"                if(element.hasOwnProperty('len'))\n"
"                {\n"
"                    newArr[index] = utility.copySlice(element);//Element is a slice\n"
"                }else{\n"
"                    newArr[index] = utility.copyObj(element); //Element is an object;\n"
"                }\n"    
"        }\n"
"    });\n"
"    return newArr;\n"
"};\n"
"//Makes deep copy of array\n"
"utility.copyArray = function copyArray(arr)\n"
"{\n"
"    return utility.copyArrayToFrom(arr,[]);\n"
"};\n"
"//Makes deep copy of object\n"
"utility.copyObj = function copyObj(obj)\n"
"{\n"
"    var newObj = {};//Initializing Object\n"
"    for(var key in obj)\n"
"    {\n"
"        var element = obj[key];\n"
"        var type = typeof element;\n"
"        if(element.constructor === Array) newObj[key] = utility.copyArray(element); //Push Element into array;\n"
"        else if(type === 'string' ||type === 'number'||type == 'boolean')newObj[key] = element;//This are passed by value\n"
"        else{\n"
"           if(element.hasOwnProperty('len'))\n"
"           {\n"
"               newArr[index] = utility.copySlice(element);//Element is a slice\n"
"           }else{\n"
"               newArr[index] = utility.copyObj(element); //Element is an object;\n"
"           }\n"    
"        }\n"
"    }"
"    return newObj;\n"
"};\n"
"utility.copySlice = function copySlice(slice)\n"
"{\n"
"    return {len:slice.len, arr:slice.arr};\n"
"};\n"
"// Checks bounds of array and throws error, used for both arrays and slices\n"
"utility.checkIndexBounds = function checkIndexBounds(arr, index) {\n"
"    if (index < 0 || index >= arr.length) {\n"
"        throw new Error('index out of range');\n"
"    } else {\n"
"        return index;\n"
"    }\n"
"};\n"
"utility.checkIndexBoundsSlice = function checkIndexBoundsSlice(obj, index) {\n"
"    if (index < 0 || index >= obj.len) {\n"
"        throw new Error('index out of range');\n"
"    } else {\n"
"        return index;\n"
"    }\n"
"};\n"
"//Checks division by zero and throws an error\n"
"utility.checkDivideByZero = function(exp)\n"
"{\n"
"    if(exp===0) throw new Error('error division by zero');\n"
"    else return exp;\n"
"};\n"
"//Used to append an element onto a slice\n"
"utility.appendSlice = function(slice, item)\n"
"{\n"
"    if(slice.len==slice.arr.length)\n"
"    {\n"
"       var newArr = utility.copyArrayToFrom(slice.arr,new Array(slice.arr.length*2));\n"
"       newArr[slice.len] = item;\n"
"       return {len:slice.len, arr:newArr};\n"
"    }else{\n"
"       slice.arr[slice.len] = item;\n"
"       return slice;\n"
"    }\n"

"};\n"
"//Compares two arrays/slices for equality\n"
"utility.arrEquals = function(arr1,arr2)\n"
"{\n"
"    if(!arr1|| arr1.constructor !== Array||!arr2|| arr2.constructor !== Array) return false;\n"
"    for(var index = 0;index<arr1.length;index++)\n"
"    {\n"
"        var element = arr1[index];\n"
"        var type = typeof element;\n"
"        if(element.constructor === Array&&arr2[index].constructor===Array)\n"
"        {\n"
"           if(!utility.arrEquals(element, arr2[index]))return false;\n"
"        }else if((type === 'string' ||type === 'number'||type == 'boolean'))\n"
"        {\n"
"            if(element !== arr2[index]) return false;\n"
"        }else if(!utility.objEquals(element, arr2[index])) return false;\n"
"    }\n"
"    return true;\n"
"};\n"
"//Compares two objects/structs for equality\n"
"utility.objEquals = function(obj1,obj2)\n"
"{\n"
"    if(!obj2||typeof obj2 !== 'object'||!obj1||typeof obj1 !== 'object') return false;\n"
"    for(var key in obj1)\n"
"    {\n"
"        var type = typeof obj1[key];\n"
"        if(obj1[key].constructor === Array&&obj2[key].constructor===Array)\n"
"        {\n"
"           if(!utility.arrEquals(obj1[key],obj2[key]))return false;\n"
"        }else if(type === 'string' ||type === 'number'||type == 'boolean')\n"
"        {\n"
"            if(obj1[key] !== obj2[key]) return false;\n"
"        }else if(!utility.objEquals(obj1[key],obj2[key])) return false; \n"
"    }\n"
"    return true;\n"
"};\n\n";
